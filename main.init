(setq create-lockfiles nil)
(setq make-backup-files nil)

(setq inhibit-startup-screen t)
(setq initial-scratch-message nil)

(setq-default indent-tabs-mode nil)
(setq require-final-newline t)

(scroll-bar-mode -1)
(tool-bar-mode -1)

(setq visible-bell t)

(add-hook 'prog-mode-hook 'display-line-numbers-mode)

(setq global-auto-revert-non-file-buffers t)
(global-auto-revert-mode)

(setq shell-file-name "/bin/sh")

(keymap-global-set "M-z" 'zap-up-to-char)

(keymap-global-set "<f8>" 'project-find-file)
(keymap-global-set "M-<f8>" 'project-switch-to-buffer)
(keymap-global-set "<f1>" 'delete-window)
(keymap-global-set "C-M-<f1>" 'tab-close)
(keymap-global-set "<f2>" 'delete-other-windows)
(keymap-global-set "<f3>" 'split-window-right)
(keymap-global-set "M-<f3>" 'split-window-below)
(keymap-global-set "M-<f4>" 'rename-buffer)
(keymap-global-set "C-M-<f4>" 'tab-rename)
(keymap-global-set "<f11>" 'project-other-tab-command)
(keymap-global-set "C-M-<f11>" 'tab-new)
(keymap-global-set "<f9>" 'tab-bar-history-back)
(keymap-global-set "M-<f9>" 'tab-bar-history-forward)

(global-subword-mode)

(setq mac-option-key-is-meta t)
(setq mac-right-option-modifier nil)

(tab-bar-mode)
(tab-bar-history-mode)

(defun mac-p ()
  (memq window-system '(mac ns x)))

(when (mac-p)
  (setq insert-directory-program "gls")
  (setq dired-listing-switches "-al --group-directories-first"))

;; Increase lsp-mode performance as described in
;; https://emacs-lsp.github.io/lsp-mode/page/performance/.
(setq gc-cons-threshold 100000000)
(setq read-process-output-max (* 1024 1024))

(defun my/backward-whitespace ()
  (interactive)
  (forward-whitespace -1)
  (forward-whitespace -1)
  (forward-whitespace 1))

(defun my/kill-forward-whitespace ()
  (interactive)
  (set-mark-command nil)
  (forward-whitespace 1)
  (kill-region nil nil t))

(defun my/kill-backward-whitespace ()
  (interactive)
  (setd-mark-command nil)
  (my/backward-whitespace)
  (kill-region nil nil t))

(keymap-global-set "M-n" 'forward-whitespace)
(keymap-global-set "M-p" 'my/backward-whitespace)
(keymap-global-set "M-N" 'my/kill-forward-whitespace)
(keymap-global-set "M-P" 'my/kill-backward-whitespace)

(keymap-global-set "M-/" 'comment-or-uncomment-region)

(load "package.init")

(use-package exec-path-from-shell
  :when (or (daemonp) (mac-p))
  :config (exec-path-from-shell-initialize))

(use-package dired
  :straight nil
  :bind
  (("<f7>" . dired-jump)))

(load "theme.init")

(load "org.init")

(use-package ace-window
  :custom
  (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  (aw-scope 'frame)
  :bind
  (("M-o" . ace-window)))

(use-package magit
  :bind
  (("C-c g" . magit-file-dispatch)))

(use-package projectile
  :demand
  :custom
  (projectile-switch-project-action 'projectile-dired)
  :config
  (projectile-mode 1)
  :bind
  (("<f12>" . 'projectile-run-vterm)
   ("<f6>" . 'projectile-ripgrep)
   :map projectile-mode-map ("C-c p" . projectile-command-map)))

(use-package rg
  :config
  (rg-enable-default-bindings))

(use-package vertico
  :config
  (vertico-mode))

(use-package savehist
  :config
  (savehist-mode))

(use-package orderless
  :custom
  (completion-styles '(orderless)))

(use-package company
  :custom
  (company-minimum-prefix-length 2)
  (company-idle-delay 0.2)
  (company-selection-wrap-around t)
  (company-dabbrev-downcase nil)
  :config
  (global-company-mode))

(use-package flycheck
  :config
  (global-flycheck-mode)
  :custom
  ;; Avoid key conflicts in Org mode.
  (flycheck-global-modes '(not org-mode)))

(use-package smartparens
  :demand
  :init
  (add-hook 'emacs-lisp-mode-hook #'smartparens-strict-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'smartparens-strict-mode)
  (add-hook 'scala-mode-hook #'smartparens-mode)
  (add-hook 'ruby-mode-hook #'smartparens-mode)
  (add-hook 'python-mode-hook #'smartparens-mode)
  (add-hook 'sql-mode-hook #'smartparens-mode)
  :config
  (require 'smartparens-config)
  :bind
  (:map smartparens-strict-mode-map
        ("C-<right>" . sp-forward-slurp-sexp)
        ("C-<left>" . sp-backward-slurp-sexp)
        ("M-<right>" . sp-forward-barf-sexp)
        ("M-<left>" . sp-backward-barf-sexp)
        :map smartparens-mode-map
        ("C-<right>" . sp-forward-slurp-sexp)
        ("C-<left>" . sp-backward-slurp-sexp)
        ("M-<right>" . sp-forward-barf-sexp)
        ("M-<left>" . sp-backward-barf-sexp)))

(defun my/copy-till-whitespace ()
  (set-mark-command nil)
  (forward-whitespace 1)
  (forward-whitespace -1)
  (kill-ring-save nil nil t))

(defun my/copy-between-whitespace ()
  (interactive)
  (forward-whitespace -1)
  (forward-whitespace 1)
  (my/copy-till-whitespace))

(defun my/avy-action-copy-between-whitespace (point)
  (save-excursion
    (goto-char point)
    (my/copy-between-whitespace))
  (select-window
   (cdr
    (ring-ref avy-ring 0)))
  t)

(defun my/avy-action-yank-between-whitespace (point)
  (save-excursion
    (goto-char point)
    (my/copy-between-whitespace))
  (select-window
   (cdr
    (ring-ref avy-ring 0)))
  (if (derived-mode-p 'vterm-mode)
      (vterm-yank)
    (yank))
  t)

(use-package avy
  :config
  (avy-setup-default)
  (setf (alist-get ?w avy-dispatch-alist) 'my/avy-action-copy-between-whitespace
        (alist-get ?v avy-dispatch-alist) 'my/avy-action-yank-between-whitespace)
  :bind
  (("C-'" . avy-goto-char-timer)
   ("C-;" . avy-pop-mark)
   ("M-g g" . avy-goto-line)
   ("M-g G" . avy-goto-end-of-line)))

(load "lsp.init")

(use-package markdown-mode)

(use-package fish-mode)

(load "ruby.init")
(load "python.init")
(load "scala.init")

(use-package ledger-mode
  :after org
  :custom
  (ledger-default-date-format "%Y-%m-%d"))

(use-package vterm
  :after (dired projectile)
  :init
  (setq vterm-module-cmake-args "-DUSE_SYSTEM_LIBVTERM=no")
  :bind
  (("C-c v" . vterm-other-window)
   :map vterm-mode-map
   ("<f8>" . 'project-find-file)
   ("M-<f8>" . 'project-switch-to-buffer)
   ("<f1>" . 'delete-window)
   ("C-M-<f1>" . 'tab-close)
   ("<f2>" . 'delete-other-windows)
   ("<f3>" . 'split-window-right)
   ("M-<f3>" . 'split-window-below)
   ("M-<f4>" . 'rename-buffer)
   ("C-M-<f4>" . 'tab-rename)
   ("<f11>" . 'project-other-tab-command)
   ("C-M-<f11>" . 'tab-new)
   ("<f9>" . 'tab-bar-history-back)
   ("M-<f9>" . 'tab-bar-history-forward)
   ("<f7>" . dired-jump)
   ("<f6>" . 'projectile-ripgrep))
  :custom
  (vterm-shell "/usr/local/bin/fish"))

(use-package eradio
  :custom
  (eradio-channels '(("DEF CON - soma fm" . "https://somafm.com/defcon256.pls")
                     ("Deep Space One - soma fm" . "https://somafm.com/deepspaceone.pls")
                     ("cyberia - lainon" . "https://lainon.life/radio/cyberia.ogg.m3u")
                     ("cafe - lainon" . "https://lainon.life/radio/cafe.ogg.m3u")
                     ("BAGeL RADIO" . "http://ais-sa3.cdnstream1.com/2606_128.mp3")))
  (eradio-player '("mpv" "--no-video" "--no-terminal"))
  :bind
  (("C-c r p" . 'eradio-play)
   ("C-c r s" . 'eradio-stop)
   ("C-c r t" . 'eradio-toggle)))

(use-package crux
  :bind
  (("C-k" . crux-smart-kill-line)
   ("C-o" . crux-smart-open-line)
   ("C-S-o" . crux-smart-open-line-above)
   ("C-^" . crux-top-join-line))
  :config
  (advice-add 'crux-delete-file-and-buffer :after 'delete-window))

(use-package super-save
  :custom
  (super-save-auto-save-when-idle t)
  :config
  (super-save-mode 1)
  (setq auto-save-default nil)
  (add-to-list 'super-save-triggers 'ace-window)
  (add-to-list 'super-save-hook-triggers 'find-file-hook))

(use-package consult
  :demand
  :bind
  ("C-x b" . consult-buffer)
  ("C-x 4 b" . consult-buffer-other-window)
  :config
  (recentf-mode))

(use-package marginalia
  :demand
  :config
  (marginalia-mode)
  :bind
  (:map minibuffer-local-map
        ("M-A" . marginalia-cycle)))

(use-package multiple-cursors
  :config
  (add-to-list 'mc/cmds-to-run-for-all 'sp-backward-delete-char)
  (delq 'sp-backward-delete-char 'mc/cmds-to-run-once)
  :bind
  ("C-<return>" . set-rectangular-region-anchor)
  ("C-c k" . mc/mark-all-dwim)
  ("C-+" . mc/mark-next-like-this)
  ("C-c m" . mc/edit-lines)
  ("C-S-<mouse-1>" . 'mc/add-cursor-on-click))

(use-package iy-go-to-char
  :bind
  ("C-c f" . iy-go-to-char)
  ("C-c F" . iy-go-to-char-backward)
  ("C-c t" . iy-go-up-to-char)
  ("C-c T" . iy-go-up-to-char-backward)
  ("C-c ;" . iy-go-to-or-up-to-continue)
  ("C-c ," . iy-go-to-or-up-to-continue-backward))

(use-package expand-region
  :bind
  ("C-=" . 'er/expand-region))

(use-package pulsar
  :custom
  (pulsar-pulse-on-window-change t)
  :config
  (pulsar-global-mode))

(use-package yaml-mode)

(use-package transpose-frame
  :bind
  (("C-c w" . transpose-frame)))

(add-to-list 'auto-mode-alist '("\\.hql\\'" . sql-mode))
(add-to-list 'auto-mode-alist '("\\.cql\\'" . sql-mode))

(add-to-list 'auto-mode-alist '("\\.ya?ml.erb\\'" . yaml-mode))
