(defconst my/LIFE_FILE "~/org/life.org")
(defconst my/WORK_FILE "~/org/work.org")
(defconst my/PROFESSION_FILE "~/org/profession.org")
(defconst my/SOMEDAY_FILE "~/org/someday.org")
(defconst my/PROGRAMMING_NOTES_FILE "~/org/programming-notes.org")
(defconst my/EMACS_NOTES_FILE "~/org/emacs-notes.org")
(defconst my/WEB_BOOKMARKS_FILE "~/org/web-bookmarks.org")
(defconst my/PERSONAL_LOG_FILE "~/org/personal-log.org")
(defconst my/WORK_LOG_FILE "~/org/work-log.org")

(defun my/org-clock-in ()
  (interactive)
  (org-clock-in '(4)))

(defun my/capture-template (name)
  (let ((file-name (format "capture-templates/%s.txt" name)))
    (expand-file-name file-name my/ROOT)))

(defun my/capture-to-file (keys title target-file template)
  `(,keys ,title entry (file ,target-file) (file ,(my/capture-template template))))

(defun my/capture-to-file+headline (keys title target-file target-headline template)
  `(,keys ,title entry (file+headline ,target-file ,target-headline) (file ,(my/capture-template template))))

(defun my/capture-to-file-at-point (keys title target-file target-fn template)
  `(,keys ,title entry (file+function ,target-file ,target-fn) (file ,(my/capture-template template))))

(defconst my/PROJECT_ID_IN_SELECT_OPTION_RE (rx string-start "[" (group (1+ any)) "]"))

(defun my/extract-project-id-from-select-option (option)
  (save-match-data
    (and (string-match my/PROJECT_ID_IN_SELECT_OPTION_RE option)
         (match-string 1 option))))

(defun my/read-projects-to-alist (file)
  (org-map-entries
   '(let* ((element (org-element--current-element 1))
           (project-id (org-element-property :PROJECT_ID element))
           (heading (substring-no-properties (org-element-property :raw-value element)))
           (begin (org-element-property :begin element)))
      (cons project-id `(:heading ,heading :begin ,begin)))
   "TODO=\"TODO\"+GTD_TYPE=\"Project\""
   `(,file)))

(defun my/project-alist-to-select-options (project-alist)
  (seq-map (lambda (el)
             (let* ((project-id (car el))
                    (project-props (cdr el))
                    (heading (plist-get project-props :heading)))
               (format "[%s] %s" project-id heading)))
           project-alist))

(defun my/goto-select-project (file)
  (let* ((project-alist (my/read-projects-to-alist file))
         (options (my/project-alist-to-select-options project-alist))
         (selected-option (completing-read "Select project: " options))
         (selected-project-id (my/extract-project-id-from-select-option selected-option))
         (selected-project-props (cdr (assoc selected-project-id project-alist)))
         (selected-project-begin (plist-get selected-project-props :begin)))
    (goto-char selected-project-begin)))

(defvar my/capture-prompt-history nil)

(defun my/capture-prompt (prompt var)
  (make-local-variable var)
  (set var (read-string (concat prompt ": ") nil my/capture-prompt-history)))

(defun my/day-agenda (keys title files)
  `(,keys
    ,title
    ((agenda ""
             ((org-agenda-span 1)
              (org-agenda-skip-scheduled-if-done t)
              (org-agenda-skip-deadline-if-done t)
              (org-agenda-skip-timestamp-if-done t)))
     (tags "+TODO=\"NEXT\"+GTD_TYPE=\"Task\""
           ((org-agenda-overriding-header "NEXT")
            (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))))
     (tags "+TODO=\"TODO\"+GTD_TYPE=\"Task\""
           ((org-agenda-overriding-header "TODO")
            (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))))
     (tags "+TODO=\"WAITING\"+GTD_TYPE=\"Task\""
           ((org-agenda-overriding-header "WAITING")
            (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))))
     (tags "+TODO=\"TODO\"+GTD_TYPE=\"Project\""
           ((org-agenda-overriding-header "PROJECTS"))))
    ((org-agenda-compact-blocks)
     (org-agenda-files ',files))))

(defun my-org--with-no-drawer (func &rest _args)
  (let ((org-log-into-drawer (cl-case org-log-note-purpose
                               (state nil)
                               (note nil)
                               (t t))))
    (funcall func)))

(defun my-org-clock-add-note ()
  (interactive)
  (with-temp-buffer
    (org-clock-goto)
    (org-add-note)))

(use-package org
  :demand
  :custom
  (org-capture-templates
   `(("t" "Task")
     ,(my/capture-to-file "tl" "Life task" my/LIFE_FILE "task")
     ,(my/capture-to-file "tw" "Work task" my/WORK_FILE "task")
     ,(my/capture-to-file "tp" "Professional task" my/PROFESSION_FILE "professional-task")
     ("s" "Subtask")
     ,(my/capture-to-file-at-point "sl" "Life subtask" my/LIFE_FILE (apply-partially 'my/goto-select-project my/LIFE_FILE) "subtask")
     ,(my/capture-to-file-at-point "sw" "Work subtask" my/WORK_FILE (apply-partially 'my/goto-select-project my/WORK_FILE) "subtask")
     ,(my/capture-to-file-at-point "sp" "Professional subtask" my/PROFESSION_FILE (apply-partially 'my/goto-select-project my/PROFESSION_FILE) "professional-subtask")
     ("d" "Date")
     ,(my/capture-to-file+headline "dl" "Life date" my/LIFE_FILE "Calendar" "date")
     ,(my/capture-to-file+headline "dw" "Work date" my/WORK_FILE "Calendar" "date")
     ,(my/capture-to-file+headline "dp" "Professional date" my/PROFESSION_FILE "Calendar" "date")
     ,(my/capture-to-file "m" "Someday" my/SOMEDAY_FILE "task")
     ("p" "Project")
     ,(my/capture-to-file "pl" "Life project" my/LIFE_FILE "project")
     ,(my/capture-to-file "pw" "Work project" my/WORK_FILE "project")
     ,(my/capture-to-file "pp" "Professional project" my/PROFESSION_FILE "project")
     ("n" "Note")
     ,(my/capture-to-file "np" "Programming note" my/PROGRAMMING_NOTES_FILE "note")
     ,(my/capture-to-file "ne" "Emacs note" my/EMACS_NOTES_FILE "note")
     ,(my/capture-to-file "w" "Web bookmark" my/WEB_BOOKMARKS_FILE "web-bookmark")
     ("l" "Log")
     ,(my/capture-to-file "ll" "Personal log entry" my/PERSONAL_LOG_FILE "note")
     ,(my/capture-to-file "lw" "Work log entry" my/WORK_LOG_FILE "note")))
  (org-agenda-custom-commands
   `(,(my/day-agenda "l" "Life Agenda" `(,my/LIFE_FILE ,my/PROFESSION_FILE))
     ,(my/day-agenda "w" "Work Agenda" `(,my/WORK_FILE ,my/PROFESSION_FILE))))
  (org-agenda-files `(,my/LIFE_FILE ,my/WORK_FILE ,my/PROFESSION_FILE))
  (org-clock-in-switch-to-state "NEXT")
  (org-clock-out-remove-zero-time-clocks t)
  (org-clock-out-when-done '("TODO" "WAITING" "DONE" "CANCELLED"))
  (org-duration-format 'h:mm)
  (org-log-into-drawer t)
  (org-log-state-notes-insert-after-drawers t)
  (org-log-done 'time)
  (org-startup-indented t)
  (org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
  (org-clock-persist t)
  (org-use-sub-superscripts '{})
  (org-export-with-sub-superscripts '{})
  :config
  ;; I use "C-'" for avy-goto-char-timer.
  (add-hook 'org-mode-hook (lambda () (local-unset-key (kbd "C-'"))))
  (advice-add 'org-store-log-note :around #'my-org--with-no-drawer)
  (org-clock-persistence-insinuate)
  :bind
  (("C-c a" . org-agenda)
   ("C-c c" . org-capture)
   ("C-c J" . org-clock-goto)
   ("C-c X" . org-clock-in-last)
   ("C-c I" . my/org-clock-in)
   ("C-c O" . org-clock-out)
   ("C-c R" . org-resolve-clocks)
   ("C-c Z" . my-org-clock-add-note)
   ("C-c L" . org-store-link)))

(use-package ox-slack)

(use-package org-roam
  :custom
  (org-roam-v2-ack t)
  (org-roam-directory "~/zettelkasten")
  :config
  (org-roam-setup)
  (org-roam-db-autosync-mode)
  :bind
  (("C-c n l" . org-roam-buffer-toggle)
   ("C-c n f" . org-roam-node-find)
   ("C-c n i" . org-roam-node-insert)))

(use-package org-roam-ui
  :after org-roam
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save t)
  (org-roam-ui-open-on-start t))
