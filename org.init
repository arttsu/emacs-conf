(defconst my/LIFE-TASKS "~/org/life-tasks.org")
(defconst my/LIFE-SOMEDAY "~/org/life-someday.org")
(defconst my/LIFE-PROJECTS "~/org/life-projects.org")
(defconst my/WORK-TASKS "~/org/work-tasks.org")
(defconst my/WORK-SOMEDAY "~/org/work-someday.org")
(defconst my/WORK-PROJECTS "~/org/work-projects.org")
(defconst my/PROFESSION-TASKS "~/org/profession-tasks.org")
(defconst my/PROFESSION-SOMEDAY "~/org/profession-someday.org")
(defconst my/PROFESSION-PROJECTS "~/org/profession-projects.org")

(defun my/org-clock-in ()
  (org-clock-in '(4)))

(use-package org
  :demand
  :custom
  (org-clock-in-switch-to-state "NEXT")
  (org-clock-out-remove-zero-time-clocks t)
  (org-clock-out-when-done '("TODO" "WAITING" "DONE" "CANCELLED"))
  (org-duration-format 'h:mm)
  (org-log-into-drawer t)
  (org-log-done 'time)
  (org-startup-indented t)
  (org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
  :bind
  (("C-c a" . org-agenda)
   ("C-c c" . org-capture)
   ("C-c J" . org-clock-goto)
   ("C-c X" . org-clock-in-last)
   ("C-c I" . my/org-clock-in)
   ("C-c O" . org-clock-out)
   ("C-c R" . org-resolve-clocks)))

(defun my/capture-template (name)
  (let ((file-name (format "capture-templates/%s.txt" name)))
    (expand-file-name file-name my/ROOT)))

(defun my/capture-to-file (keys title target-file template)
  `(,keys ,title entry (file ,target-file) (file ,(my/capture-template template))))

(defun my/capture-to-file+headline (keys title target-file target-headline template)
  `(,keys ,title entry (file+headline ,target-file ,target-headline) (file ,(my/capture-template template))))

(setq org-capture-templates
      `(("t" "Task")
        ,(my/capture-to-file "tl" "Life task" my/LIFE-TASKS "task")
        ,(my/capture-to-file "tw" "Work task" my/WORK-TASKS "task")
        ,(my/capture-to-file "tp" "Professional task" my/PROFESSION-TASKS "task")
        ("d" "Date")
        ,(my/capture-to-file+headline "dl" "Life date" my/LIFE-TASKS "Calendar" "date")
        ,(my/capture-to-file+headline "dw" "Work date" my/WORK-TASKS "Calendar" "date")
        ,(my/capture-to-file+headline "dp" "Professional date" my/PROFESSION-TASKS "Calendar" "date")
        ("s" "Someday")
        ,(my/capture-to-file "sl" "Life someday" my/LIFE-SOMEDAY "task")
        ,(my/capture-to-file "sw" "Work someday" my/WORK-SOMEDAY "task")
        ,(my/capture-to-file "sp" "Professional someday" my/PROFESSION-SOMEDAY "task")
        ("p" "Project")
        ,(my/capture-to-file "pl" "Life project" my/LIFE-PROJECTS "project")
        ,(my/capture-to-file "pw" "Work project" my/WORK-PROJECTS "project")
        ,(my/capture-to-file "pp" "Professional project" my/PROFESSION-PROJECTS "project")))

(defun my/day-agenda (keys title files)
  `(,keys
    ,title
    ((agenda ""
             ((org-agenda-span 1)
              (org-agenda-skip-scheduled-if-done t)
              (org-agenda-skip-deadline-if-done t)
              (org-agenda-skip-timestamp-if-done t)))
     (todo "NEXT"
           ((org-agenda-overriding-header "NEXT")
            (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))))
     (todo "TODO"
           ((org-agenda-overriding-header "TODO")
            (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))))
     (todo "WAITING"
           ((org-agenda-overriding-header "WAITING")
            (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled)))))
    ((org-agenda-compact-blocks)
     (org-agenda-files ',files))))

(defun my/projects-agenda (keys title files)
  `(,keys
    ,title
    ((todo "TODO" ((org-agenda-overriding-header "PROJECTS"))))
    ((org-agenda-files ',files))))

(setq org-agenda-custom-commands
      `(("d" . "Day Agenda")
        ,(my/day-agenda "dl" "Life Day Agenda" `(,my/LIFE-TASKS ,my/PROFESSION-TASKS))
        ,(my/day-agenda "dw" "Work Day Agenda" `(,my/WORK-TASKS ,my/PROFESSION-TASKS))
        ("p" . "Projects")
        ,(my/projects-agenda "pl" "Life Projects" `(,my/LIFE-PROJECTS ,my/PROFESSION-PROJECTS))
        ,(my/projects-agenda "pw" "Work Projects" `(,my/WORK-PROJECTS ,my/PROFESSION-PROJECTS))))

(setq org-agenda-files `(,my/LIFE-TASKS ,my/WORK-TASKS ,my/PROFESSION-TASKS))
